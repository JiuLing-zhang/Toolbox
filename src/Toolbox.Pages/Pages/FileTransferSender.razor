@page "/file-transfer/sender"
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.SignalR.Client
@using Toolbox.Pages.Enums
@using Toolbox.Pages.HashCheckService
@using Toolbox.Pages.Models
@using Toolbox.Pages.Shared.Dialogs
@using System.Text.Json

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject IDialogService Dialog
@inject HashServiceFactory HashServiceFactory

<PageTitle>码术 - 文件传输</PageTitle>

<DialogLoading IsVisible="@_isLoading" ContentText="@_loadingMessage"></DialogLoading>

<MudPaper Width="100%" Elevation="0">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudPaper Width="100%"
                  Elevation="0"
                  Square="true"
                  Class="pa-5">

            @if (_roomId == 0)
            {
                <div class="d-flex align-center">
                    <MudProgressCircular Color="Color.Primary"
                                         Indeterminate="true"
                                         Size="Size.Small" />
                    <MudText Typo="@Typo.caption" Class="ml-2">正在创建房间....</MudText>
                </div>
            }
            else
            {
                <MudField Label=""
                          Class="mb-8"
                          Variant="Variant.Text"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.CheckCircle"
                          AdornmentColor="Color.Success">@($"房间号 {_roomId}")</MudField>

                if (_connectionType == ConnectionTypeEnum.None)
                {
                    if (!_isReceiverJoined)
                    {
                        <div class="d-flex align-center">
                            <MudProgressCircular Color="Color.Primary"
                                                 Indeterminate="true"
                                                 Size="Size.Small" />
                            <MudText Typo="@Typo.caption" Class="ml-2">等待接收方进入....</MudText>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex align-center">
                            <MudProgressCircular Color="Color.Primary"
                                                 Indeterminate="true"
                                                 Size="Size.Small" />
                            <MudText Typo="@Typo.caption" Class="ml-2">正在连接....</MudText>
                        </div>

                        <div class="mt-5" style="font-size: 12px;opacity: 0.9;">
                            无法连接？使用
                            <MudElement HtmlTag="a"
                                        Class="ma-0 cursor-pointer"
                                        Style="color:var(--mud-palette-primary);font-weight:bold;opacity: 1;"
                                        onclick="@EnableServiceRelay"
                                        rel="noopener noreferrer">
                                服务器中转
                            </MudElement>
                            发送
                        </div>
                    }
                }
                else
                {
                    <div class="d-flex align-center justify-space-between mb-2">
                        @switch (_connectionType)
                        {
                            case ConnectionTypeEnum.WebRTC:
                                <div class="mt-2" style="opacity: 0.8;font-size: 12px;">当前传输模式：点对点</div>
                                break;
                            case ConnectionTypeEnum.ServiceRelay:
                                <div class="mt-2" style="opacity: 0.8;font-size: 12px;">当前传输模式：服务器中转</div>
                                break;
                        }

                        <MudFileUpload Class="mr-3"
                                       T="IBrowserFile"
                                       OnFilesChanged="OnInputFileChanged">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Text"
                                           Color="Color.Primary"
                                           Size="Size.Small"
                                           StartIcon="@Icons.Material.Filled.FileUpload"
                                           for="@context">
                                    添加文件
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </div>

                    foreach (var file in _files)
                    {
                        <MudPaper Class="px-3 py-2">
                            <div class="d-flex align-center justify-space-between">
                                <MudText Typo="Typo.overline" Class="mt-1">@file.FileName</MudText>
                                @switch (file.State)
                                {
                                    case FileTransferStateEnum.Init:
                                        <MudLink Underline="@Underline.None"
                                                 OnClick="@(() =>SendFileAsync(file.FileName))">发送</MudLink>
                                        break;
                                    case FileTransferStateEnum.Sending:
                                        <MudLink Disabled="true">发送中</MudLink>
                                        break;
                                    case FileTransferStateEnum.Sent:
                                        <MudLink Disabled="true">完成</MudLink>
                                        break;
                                }
                            </div>
                            <MudProgressLinear Striped="true"
                                               Color="Color.Info"
                                               Size="Size.Large"
                                               Value="@file.Progress"
                                               Class="mt-3">
                                <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                                    <b>@($"{Convert.ToInt32(file.Progress)}%")</b>
                                </MudText>
                            </MudProgressLinear>
                        </MudPaper>
                    }
                }
            }
        </MudPaper>
    </MudContainer>
</MudPaper>

@code
{
    private int _roomId;
    private bool _isLoading = false;
    private string _loadingMessage = "";

    private bool _isReceiverJoined = false;
    private ConnectionTypeEnum _connectionType = ConnectionTypeEnum.None;

    private HubConnection _hub = null!;
    private DotNetObjectReference<FileTransferSender> _objRef = null!;

    private readonly List<FileTransferInfo> _files = new List<FileTransferInfo>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Console.WriteLine($"准备初始化房间....");
        _objRef = DotNetObjectReference.Create(this);

        _hub = new HubConnectionBuilder()
            .WithUrl($"{Configuration["WebAPIHost"]}/file-transfer-hub")
            .Build();


        _hub.On("ReceiverJoin", async () =>
        {
            Console.WriteLine("接收方进入");
            _isReceiverJoined = true;
            await InvokeAsync(StateHasChanged);
            await JSRuntime.InvokeVoidAsync("createSenderConnection");
        });

        _hub.On<string>("ReceiveReceiverIceCandidate", async (candidate) =>
        {
            Console.WriteLine("收到接收方候选人信息");
            await InvokeAsync(StateHasChanged);
            await JSRuntime.InvokeVoidAsync("receiveIceCandidate", candidate);
        });

        _hub.On<string>("ReceiveAnswer", async (answer) =>
        {
            Console.WriteLine("收到网络通道响应指令");
            await JSRuntime.InvokeVoidAsync("receiveAnswer", answer);
            await InvokeAsync(StateHasChanged);
        });
        await _hub.StartAsync();

        await JSRuntime.InvokeVoidAsync("initialization", _objRef, Configuration["StunServer"]);

        _roomId = await _hub.InvokeAsync<int>("CreateRoom");

        Console.WriteLine("等待接收方进入....");
    }

    [JSInvokable]
    public async Task SendIceCandidateToServer(string candidate)
    {
        Console.WriteLine("准备发送候选人信息....");
        var result = await _hub.InvokeAsync<string>("SendSenderIceCandidate", candidate);
        Console.WriteLine($"服务器返回:{result}");
    }

    [JSInvokable]
    public async Task SendOfferToServer(string offer)
    {
        Console.WriteLine("准备发送网络通道请求指令....");
        var result = await _hub.InvokeAsync<string>("SendOffer", offer);
        Console.WriteLine($"服务器返回:{result}");
    }

    [JSInvokable]
    public async Task SenderConnected()
    {
        //发送端准备就绪
        _connectionType = ConnectionTypeEnum.WebRTC;
        await InvokeAsync(StateHasChanged);
    }

    public async Task EnableServiceRelay()
    {
        _connectionType = ConnectionTypeEnum.ServiceRelay;
        var result = await _hub.InvokeAsync<string>("SwitchConnectionType");
        Console.WriteLine($"服务器返回:{result}");
        await InvokeAsync(StateHasChanged);
    }

    private async void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        long maxFileSize = 100000000;
        if (e.GetMultipleFiles()[0].Size >= maxFileSize)
        {
            var options = new DialogOptions()
                {
                    NoHeader = true
                };
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "文件大小超过系统限制");
            Dialog.Show<DialogOk>("提示", parameters, options);
            return;
        }

        var fileName = e.GetMultipleFiles()[0].Name;
        if (_files.Any(x => x.FileName == fileName))
        {
            var options = new DialogOptions()
                {
                    NoHeader = true
                };
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "不能重复添加文件");
            Dialog.Show<DialogOk>("提示", parameters, options);
            return;
        }

        await LoadingAsync("正在生成文件元数据...");
        var file = new FileTransferInfo();
        file.FileName = fileName;
        var ms = new MemoryStream();
        await e.GetMultipleFiles()[0].OpenReadStream(maxFileSize).CopyToAsync(ms);
        var buffer = ms.ToArray();
        file.FileContext = new List<byte>(buffer);
        file.FileSize = buffer.Length;
        var hashService = HashServiceFactory.Create(HashTypeEnum.SHA1);
        file.SHA1 = await hashService.ComputeHashAsync(buffer, false);

        _files.Add(file);
        await LoadingCompletedAsync();
    }

    private async Task SendFileAsync(string fileName)
    {
        if (_files.Any(x => x.State == FileTransferStateEnum.Sending))
        {
            var options = new DialogOptions()
                {
                    NoHeader = true
                };
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "不允许同时发送多个文件");
            Dialog.Show<DialogOk>("提示", parameters, options);
            return;
        }
        _files.First(x => x.FileName == fileName).State = FileTransferStateEnum.Sending;
        var file = _files.First(x => x.FileName == fileName);

        FileMetadata fileMetadata = file as FileMetadata;
        if (_connectionType == ConnectionTypeEnum.WebRTC)
        {
            await JSRuntime.InvokeVoidAsync("sendFileInfo", JsonSerializer.Serialize(fileMetadata));
            await JSRuntime.InvokeVoidAsync("sendFile", file.FileContext.ToArray());
        }
        else if (_connectionType == ConnectionTypeEnum.ServiceRelay)
        {
            await _hub.InvokeAsync("SendFileInfo", JsonSerializer.Serialize(fileMetadata));
            await SendFileWithSignalRAsync();
        }
    }

    private int _chunkSize = 16384;
    private async Task SendFileWithSignalRAsync()
    {
        var file = _files.First(x => x.State == FileTransferStateEnum.Sending);
        int totalBytesSent = 0;

        for (int offset = 0; offset < file.FileContext.Count; offset += _chunkSize)
        {
            int remainingBytes = file.FileContext.Count - offset;
            int chunkToSend = Math.Min(_chunkSize, remainingBytes);
            byte[] chunk = new byte[chunkToSend];
            file.FileContext.CopyTo(offset, chunk, 0, chunkToSend);

            await _hub.InvokeAsync("SendFile", chunk);

            totalBytesSent += chunkToSend;
            file.Progress = (double)totalBytesSent / file.FileContext.Count * 100; ;

            await InvokeAsync(StateHasChanged);
            await Task.Delay(20);
        }
        await _hub.InvokeAsync("SendFileSent");
        file.State = FileTransferStateEnum.Sent;
    }

    [JSInvokable]
    public async Task FileSending(int length)
    {
        var file = _files.First(x => x.State == FileTransferStateEnum.Sending);
        file.Progress = (double)(file.FileSize - length) / file.FileSize * 100;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task FileSent()
    {
        _files.First(x => x.State == FileTransferStateEnum.Sending).State = FileTransferStateEnum.Sent;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadingAsync(string message)
    {
        _isLoading = true;
        _loadingMessage = message;
        await InvokeAsync(StateHasChanged);
    }
    private async Task LoadingCompletedAsync()
    {
        _isLoading = false;
        _loadingMessage = "";
        await InvokeAsync(StateHasChanged);
    }



    public void Dispose()
    {
        _objRef?.Dispose();
    }
}