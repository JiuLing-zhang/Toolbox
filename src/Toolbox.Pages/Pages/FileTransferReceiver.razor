@page "/file-transfer/receiver/{RoomId:int}"
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.SignalR.Client
@using Toolbox.Pages.Enums
@using Toolbox.Pages.HashCheckService
@using Toolbox.Pages.Models

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IDialogService Dialog
@inject HashServiceFactory HashServiceFactory;

<PageTitle>码个马 - 文件传输</PageTitle>

<MudPaper Width="100%" Elevation="0">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudPaper Width="100%"
                  Elevation="0"
                  Square="true"
                  Class="pa-5">

            <div class="d-flex mb-8">
                <MudChip T="string" Disabled="true" Label="true" Variant="Variant.Outlined" Color="Color.Surface">
                    接收方
                </MudChip>
                <MudChip T="string" Label="true" Variant="Variant.Outlined" Color="Color.Success">
                    @($"房间号 {RoomId}")
                </MudChip>

                @switch (_connectionType)
                {
                    case ConnectionTypeEnum.WebRTC:
                        <MudChip T="string" Label="true" Variant="Variant.Outlined" Color="Color.Success">
                            点对点传输
                        </MudChip>
                        break;
                    case ConnectionTypeEnum.ServiceRelay:
                        <MudChip T="string" Label="true" Variant="Variant.Outlined" Color="Color.Warning">
                            服务器中转传输
                        </MudChip>
                        break;
                }

            </div>

            @if (_connectionType == ConnectionTypeEnum.None)
            {
                <div class="d-flex align-center">
                    <MudProgressCircular Color="Color.Primary"
                                         Indeterminate="true"
                                         Size="Size.Small" />
                    <MudText Typo="@Typo.caption" Class="ml-2">正在连接....</MudText>
                </div>
            }
            else
            {
                foreach (var file in _files)
                {
                    <MudPaper Class="px-3 py-2">
                        <div class="d-flex align-center justify-space-between">
                            <MudText Typo="Typo.overline" Class="mt-1">@file.FileName</MudText>
                            @switch (file.State)
                            {
                                case FileTransferStateEnum.Sent:
                                    if (file.Succeed)
                                    {
                                        <MudLink Underline="@Underline.None"
                                                 OnClick="@(() =>DownloadFileAsync(file.FileName))">下载</MudLink>
                                    }
                                    else
                                    {
                                        <MudLink Disabled="true">@($"失败：{file.Message}")</MudLink>
                                    }
                                    break;
                                case FileTransferStateEnum.Sending:
                                    <MudLink Disabled="true">接收中</MudLink>
                                    break;
                            }
                        </div>
                        <MudProgressLinear Striped="true"
                                           Color="Color.Info"
                                           Size="Size.Large"
                                           Value="@file.Progress"
                                           Class="mt-3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                                <b>@($"{Convert.ToInt32(file.Progress)}%")</b>
                            </MudText>
                        </MudProgressLinear>
                    </MudPaper>
                }
            }

        </MudPaper>
    </MudContainer>
</MudPaper>

@code
{
    [Parameter]
    public int RoomId { get; set; }

    private ConnectionTypeEnum _connectionType = ConnectionTypeEnum.None;

    private HubConnection _hub = null!;
    private DotNetObjectReference<FileTransferReceiver> _objRef = null!;

    private readonly List<FileTransferInfo> _files = new List<FileTransferInfo>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Console.WriteLine($"准备初始化模块....");
        _objRef = DotNetObjectReference.Create(this);

        _hub = new HubConnectionBuilder()
            .WithUrl($"{Configuration["WebAPIHost"]}/file-transfer-hub")
            .Build();

        _hub.On<string>("ReceiveSenderIceCandidate", async (candidate) =>
        {
            Console.WriteLine("收到发送方候选人信息");
            await InvokeAsync(StateHasChanged);
            await JSRuntime.InvokeVoidAsync("receiveIceCandidate", candidate);
        });

        _hub.On<string>("ReceiveOffer", async (offer) =>
        {
            Console.WriteLine("收到网络通道请求指令");
            await InvokeAsync(StateHasChanged);
            await JSRuntime.InvokeVoidAsync("createReceiverConnection", offer);
        });
        _hub.On("ReceiveSwitchConnectionType", async () =>
        {
            //切换服务器中转模式
            _connectionType = ConnectionTypeEnum.ServiceRelay;
            await InvokeAsync(StateHasChanged);
        });
        _hub.On<string>("ReceiveFileInfo", async (fileInfo) =>
        {
            await OnReceiveFileInfo(fileInfo);
        });
        _hub.On<byte[]>("ReceiveFile", async (buffer) =>
        {
            await OnFileReceivingAsync(buffer);
        });
        _hub.On("ReceiveFileSent", async () =>
        {
            await OnFileReceived();
        });

        await _hub.StartAsync();
        await JSRuntime.InvokeVoidAsync("initialization", _objRef, Configuration["StunServer"]);

        var result = await _hub.InvokeAsync<string>("JoinRoom", RoomId);
        if (result != "ok")
        {
            await Dialog.ShowMessageBox("提示", result, yesText: "确定");
            NavigationManager.NavigateTo($"/file-transfer");
            return;
        }
    }

    [JSInvokable]
    public async Task SendIceCandidateToServer(string candidate)
    {
        Console.WriteLine("准备发送候选人信息....");
        var result = await _hub.InvokeAsync<string>("SendReceiverIceCandidate", candidate);
        Console.WriteLine($"服务器返回:{result}");
    }

    [JSInvokable]
    public async Task SendAnswerToServer(string answer)
    {
        Console.WriteLine("准备发送网络通道响应指令....");
        var result = await _hub.InvokeAsync<string>("SendAnswer", answer);
        Console.WriteLine($"服务器返回:{result}");
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task ReceiverConnected()
    {
        //接收端准备就绪
        _connectionType = ConnectionTypeEnum.WebRTC;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task FileReceivingWithWebRTC(byte[] buffer)
    {
        await OnFileReceivingAsync(buffer);
    }

    [JSInvokable]
    public async Task FileInfoReceived(string fileInfo)
    {
        await OnReceiveFileInfo(fileInfo);
    }

    private async Task OnReceiveFileInfo(string fileInfo)
    {
        var file = fileInfo.ToObject<FileTransferInfo>();
        if (file == null)
        {
            return;
        }
        file.FileContext = new List<byte>();
        file.State = FileTransferStateEnum.Sending;
        _files.Add(file);
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task FileReceivedWithWebRTC()
    {
        await OnFileReceived();
    }

    private async Task OnFileReceivingAsync(byte[] buffer)
    {
        var file = _files.First(x => x.State == FileTransferStateEnum.Sending);
        file.FileContext.AddRange(buffer);
        file.Progress = (double)file.FileContext.Count / file.FileSize * 100;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnFileReceived()
    {
        var file = _files.First(x => x.State == FileTransferStateEnum.Sending);
        var sha1 = await HashServiceFactory.Create(HashTypeEnum.SHA1).ComputeHashAsync(file.FileContext.ToArray(), false);
        if (file.SHA1 != sha1)
        {
            file.Message = "文件校验失败";
            file.Succeed = false;
        }
        else
        {
            file.Succeed = true;
        }
        file.State = FileTransferStateEnum.Sent;
        await InvokeAsync(StateHasChanged);
    }

    private async Task DownloadFileAsync(string fileName)
    {
        await JSRuntime.InvokeVoidAsync("saveToFileWithBufferAndName", fileName, _files.First(x => x.FileName == fileName).FileContext.ToArray());
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }
}