@page "/hash"

@using JiuLing.CommonLibs.ExtensionMethods;
@using JiuLing.CommonLibs.Security
@using Microsoft.Extensions.Configuration;
@using Toolbox.Pages.Shared.Dialogs;
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject IDialogService Dialog

<PageTitle>码术 - 哈希工具</PageTitle>

<MudButtonGroup Class="mt-2"
                OverrideStyles=false>
    @foreach (var hashType in _hashTypeList)
    {
        Color color;
        if (_currentHashType == hashType)
        {
            color = Color.Info;
        }
        else
        {
            color = Color.Dark;
        }
        <MudButton Color="@(color)"
               Variant="Variant.Outlined"
               OnClick="@(()=>HashTypeSwitch(hashType))">@hashType</MudButton>
    }
</MudButtonGroup>

<MudGrid Spacing="3" Class="mt-4">
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.subtitle2">字符串计算</MudText>
        <MudTextField T="string"
                      Immediate=true
                      Label="请输入要计算的字符串"
                      Variant="Variant.Outlined"
                      TextChanged="@((value)=>OnInputTextChanged(value))"
                      Lines="6" />
    </MudItem>
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.subtitle2">文件计算</MudText>
        <MudStack Style="width: 100%">
            <MudFileUpload T="IBrowserFile" OnFilesChanged="OnInputFileChanged" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                           @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                <ButtonTemplate>
                    @if (_fileName.IsEmpty())
                    {
                        <MudPaper Height="150px" Outlined="true" Class="@_dragClass">
                            <MudText Typo="Typo.h6">
                                点击这里选择文件 或 拖拽文件到该区域
                            </MudText>
                        </MudPaper>
                    }
                    else
                    {
                        <MudPaper Height="150px" Outlined="true" Class="relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full z-30">
                            <MudChip Color="Color.Dark"
                                 Text="@_fileName"
                                 OnClose="@(()=>RemoveFile())" />
                        </MudPaper>
                    }
                </ButtonTemplate>
            </MudFileUpload>
        </MudStack>
    </MudItem>

    <MudItem xs="12">
        <MudToolBar Class="align-end pl-0 pr-0">
            <MudText Typo="Typo.subtitle2" Color="Color.Info" Class="mr-1">@_currentHashType</MudText>
            <MudText Typo="Typo.subtitle2" Class="mr-5">计算结果</MudText>
            <div style="width: 100px;">
                <MudSelect Margin="Margin.Dense"
                           T="string"
                           @bind-Value="_encoding"
                           Label="编码"
                           Variant="Variant.Text">
                    <MudSelectItem Value="@("UTF-8")" />
                </MudSelect>
            </div>
            <MudSwitch Class="ml-5"
                       T="bool"
                       CheckedChanged="@((value)=>OnIsUpperChanged(value))"
                       Label="大写"
                       Color="Color.Success" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                           Color="Color.Success"
                           OnClick="@(DoContentCopy)"
                           Size="Size.Small" />
        </MudToolBar>

        <MudTextField T="string"
                      Variant="Variant.Outlined"
                      Value="@_hashResult"
                      Lines="6" />
    </MudItem>
</MudGrid>

<DialogLoading IsVisible="@_isLoading" ContentText="正在计算"></DialogLoading>

@code {
    private bool _isLoading = false;
    private string _currentHashType = "SHA1";
    private readonly List<string> _hashTypeList = new List<string>() { "SHA1", "SHA256" };
    private static readonly string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;

    /// <summary>
    /// 计算方式是否为字符串计算
    /// </summary>
    private bool _isCalculateForText = true;
    private string _inputText = "";
    private string _fileName = "";
    private byte[]? _fileBytes;
    private string _encoding = "UTF-8";
    private bool _isUpper = false;
    private string _hashResult = "";
    private void HashTypeSwitch(string hashType)
    {
        _currentHashType = hashType;
        GetHashInner();
    }

    private async void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        long maxFileSize = Convert.ToInt64(Configuration["HashCheckMaxFileSize"]);
        if (e.GetMultipleFiles()[0].Size >= maxFileSize)
        {
            var options = new DialogOptions()
                {
                    NoHeader = true
                };
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "文件大小超过系统限制");
            Dialog.Show<DialogOk>("提示", parameters, options);
            return;
        }
        _isLoading = true;
        _fileName = e.GetMultipleFiles()[0].Name;
        var ms = new MemoryStream();
        await e.GetMultipleFiles()[0].OpenReadStream(maxFileSize).CopyToAsync(ms);
        _fileBytes = ms.ToArray();
        _isCalculateForText = false;
        GetHashInner();
    }
    private void RemoveFile()
    {
        _fileName = "";
        _fileBytes = null;
        _hashResult = "";
    }
    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }
    private void OnInputTextChanged(string value)
    {
        _isCalculateForText = true;
        _inputText = value;
        GetHashInner();
    }

    private void OnIsUpperChanged(bool value)
    {
        _isUpper = value;
        GetHashInner();
    }

    private void GetHashInner()
    {
        switch (_currentHashType)
        {
            case "SHA1":
                GetSHA1();
                break;
            case "SHA256":
                GetSHA256();
                break;
            default:
                _hashResult = "不支持的类型";
                break;
        }
    }

    private void GetSHA1()
    {
        if (_isCalculateForText)
        {
            if (_inputText.IsEmpty())
            {
                _hashResult = "";
                _isLoading = false;
                return;
            }
            if (_isUpper)
            {
                _hashResult = SHA1Utils.GetStringValueToUpper(_inputText);
            }
            else
            {
                _hashResult = SHA1Utils.GetStringValueToLower(_inputText);
            }
        }
        else
        {
            if (_fileBytes == null)
            {
                _hashResult = "";
                _isLoading = false;
                return;
            }
            if (_isUpper)
            {
                _hashResult = SHA1Utils.GetBytesValueToUpper(_fileBytes);
            }
            else
            {
                _hashResult = SHA1Utils.GetBytesValueToLower(_fileBytes);
            }
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void GetSHA256()
    {
        if (_isCalculateForText)
        {
            if (_inputText.IsEmpty())
            {
                _hashResult = "";
                _isLoading = false;
                return;
            }
            if (_isUpper)
            {
                _hashResult = SHA256Utils.GetStringValueToUpper(_inputText);
            }
            else
            {
                _hashResult = SHA256Utils.GetStringValueToLower(_inputText);
            }
        }
        else
        {
            if (_fileBytes == null)
            {
                _hashResult = "";
                _isLoading = false;
                return;
            }
            if (_isUpper)
            {
                _hashResult = SHA256Utils.GetBytesValueToUpper(_fileBytes);
            }
            else
            {
                _hashResult = SHA256Utils.GetBytesValueToLower(_fileBytes);
            }
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async void DoContentCopy()
    {
        await JSRuntime.InvokeAsync<object>("copyToClipboard", _hashResult);
    }
}
