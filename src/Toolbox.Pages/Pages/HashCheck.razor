@page "/hash"

@using Microsoft.Extensions.Configuration;
@using Toolbox.Pages.Enums;
@using Toolbox.Pages.HashCheckService;
@using Toolbox.Pages.Shared.Dialogs;

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject IDialogService Dialog
@inject HashServiceFactory HashServiceFactory;

<PageTitle>码术 - 哈希工具</PageTitle>

<MudButtonGroup Class="mt-2"
                OverrideStyles=false>
    @foreach (HashTypeEnum hashType in Enum.GetValues(typeof(HashTypeEnum)))
    {
        Color color;
        if (_currentHashType == hashType)
        {
            color = Color.Info;
        }
        else
        {
            color = Color.Dark;
        }
        <MudButton Color="@(color)"
                   Variant="Variant.Outlined"
                   OnClick="@(()=>HashTypeSwitchAsync(hashType))">@hashType</MudButton>
    }

</MudButtonGroup>

<MudGrid Spacing="3" Class="mt-4">
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.subtitle2">字符串计算</MudText>
        <MudTextField T="string"
                      Immediate=true
                      Label="请输入要计算的字符串"
                      Variant="Variant.Outlined"
                      TextChanged="@((value)=>OnInputTextChanged(value))"
                      Lines="6" />
    </MudItem>
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.subtitle2">文件计算</MudText>
        <MudStack Style="width: 100%">
            <MudFileUpload T="IBrowserFile" OnFilesChanged="OnInputFileChanged" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
            @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                <ButtonTemplate>
                    @if (_fileName.IsEmpty())
                    {
                        <MudPaper Height="150px" Outlined="true" Class="@_dragClass">
                            <MudText Typo="Typo.h6">
                                点击这里选择文件 或 拖拽文件到该区域
                            </MudText>
                        </MudPaper>
                    }
                    else
                    {
                        <MudPaper Height="150px" Outlined="true" Class="relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full z-30">
                            <MudChip Color="Color.Dark"
                                     Text="@_fileName"
                                     OnClose="@(()=>RemoveFile())" />
                        </MudPaper>
                    }
                </ButtonTemplate>
            </MudFileUpload>
        </MudStack>
    </MudItem>

    <MudItem xs="12">
        <div class="d-flex align-center mt-2">
            <MudText Typo="Typo.subtitle2" Color="Color.Info" Class="mr-1">@_currentHashType</MudText>
            <MudText Typo="Typo.subtitle2" Class="mr-5">计算结果</MudText>
            <MudSwitch Class="ml-5"
                       T="bool"
                       CheckedChanged="@((value)=>OnIsUpperChanged(value))"
                       Label="大写"
                       Color="Color.Success" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                           Color="Color.Success"
                           OnClick="@(DoContentCopyAsync)"
                           Size="Size.Small" />
        </div>

        <MudTextField T="string"
                      Variant="Variant.Outlined"
                      Value="@_hashResult"
                      Lines="6" />
    </MudItem>
</MudGrid>

<DialogLoading IsVisible="@_isLoading" ContentText="正在计算"></DialogLoading>

@code {
    private bool _isLoading = false;
    private HashTypeEnum _currentHashType = HashTypeEnum.MD5;
    private static readonly string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;

    /// <summary>
    /// 计算方式是否为字符串计算
    /// </summary>
    private bool _isCalculateForText = true;
    private string _inputText = "";
    private string _fileName = "";
    private byte[]? _fileBytes;
    private bool _isUpper = false;
    private string _hashResult = "";
    private async Task HashTypeSwitchAsync(HashTypeEnum hashType)
    {
        _currentHashType = hashType;
        await GetHashInnerAsync();
    }

    private async void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        long maxFileSize = Convert.ToInt64(Configuration["HashCheckMaxFileSize"]);
        if (e.GetMultipleFiles()[0].Size >= maxFileSize)
        {
            var options = new DialogOptions()
                {
                    NoHeader = true
                };
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "文件大小超过系统限制");
            Dialog.Show<DialogOk>("提示", parameters, options);
            return;
        }
        _isLoading = true;
        _fileName = e.GetMultipleFiles()[0].Name;
        var ms = new MemoryStream();
        await e.GetMultipleFiles()[0].OpenReadStream(maxFileSize).CopyToAsync(ms);
        _fileBytes = ms.ToArray();
        _isCalculateForText = false;
        await GetHashInnerAsync();
    }
    private void RemoveFile()
    {
        _fileName = "";
        _fileBytes = null;
        _hashResult = "";
    }
    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }
    private async Task OnInputTextChanged(string value)
    {
        _isCalculateForText = true;
        _inputText = value;
        await GetHashInnerAsync();
    }

    private Task OnIsUpperChanged(bool value)
    {
        if (value)
        {
            _hashResult = _hashResult.ToUpper();
        }
        else
        {
            _hashResult = _hashResult.ToLower();
        }
        _isUpper = value;
        return Task.CompletedTask;
    }

    private async Task GetHashInnerAsync()
    {
        if ((_isCalculateForText && _inputText.IsEmpty()) || (!_isCalculateForText && _fileBytes == null))
        {
            _hashResult = "";
            _isLoading = false;
            return;
        }

        var hashService = HashServiceFactory.Create(_currentHashType);
        if (_isCalculateForText)
        {
            _hashResult = await hashService.ComputeHashAsync(_inputText, _isUpper);
        }
        else
        {
            _hashResult = await hashService.ComputeHashAsync(_fileBytes, _isUpper);
        }
        _isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async void DoContentCopyAsync()
    {
        await JSRuntime.InvokeAsync<object>("copyToClipboard", _hashResult);
    }
}
