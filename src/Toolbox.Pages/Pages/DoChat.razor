@page "/chat"

@using JiuLing.CommonLibs.ExtensionMethods;
@using System.Text.Json;
@using System.Text;
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using Toolbox.Pages.Models
@inject IHttpClientFactory HttpClientFactory;
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<PageTitle>码术 - AI 聊天</PageTitle>
<div class="chat-message">
    <div style="display:flex">

        <MudSelect @bind-Value="_selectedModel"
                   Class="mr-4"
                   Label="模型"
                   Dense="true"
                   Disabled="@_isLoading"
                   Adornment="Adornment.Start"
                   AdornmentIcon="@Icons.Material.Filled.Abc"
                   AdornmentColor="Color.Secondary">
            <MudSelectItem Value="@(1)">gpt-3.5-turbo</MudSelectItem>
            <MudSelectItem Value="@(2)">text-davinci-003</MudSelectItem>
        </MudSelect>

        <MudSelect @bind-Value="_selectedChatType"
                   Class="ml-4 mr-4"
                   Label="模式"
                   Dense="true"
                   Disabled="@(_isLoading||_selectedModel!=1)"
                   Adornment="Adornment.Start"
                   AdornmentIcon="@Icons.Material.Filled.Code"
                   AdornmentColor="Color.Secondary">
            <MudSelectItem Value="@(0)">普通模式</MudSelectItem>
            <MudSelectItem Value="@(1)">程序员模式</MudSelectItem>
        </MudSelect>

        <MudSelect Label="连续对话模式"
                   Class="ml-4"
                   T="bool"
                   Dense="true"
                   Disabled="@_isLoading"
                   Adornment="Adornment.Start"
                   AdornmentIcon="@Icons.Material.Filled.Person"
                   AdornmentColor="Color.Secondary"
                   ValueChanged="OnSaveContextChanged">
            <MudSelectItem Value="@(true)">开启</MudSelectItem>
            <MudSelectItem Value="@(false)">关闭</MudSelectItem>
        </MudSelect>
    </div>

    @if (_selectedSaveContext)
    {
        <MudAlert Severity="Severity.Warning"
                  Class="mt-3"
                  ContentAlignment="HorizontalAlignment.Left">当前模式会记录对话内容，尽可能的让对话更流畅，所以比较耗资源，您玩玩就好啦~~</MudAlert>
    }

    @if (_histories.Count == 0)
    {
        <MudText Class="mt-3 ml-3 d-flex align-center">
            模型
            <MudIcon Class="ml-1" Icon="@Icons.Material.Filled.Abc" Size="Size.Small"></MudIcon>
        </MudText>
        <MudAlert Dense="true" NoIcon="true" Severity="Severity.Success">text-davinci-003：速度快，对自然语言友好，对代码不友好</MudAlert>
        <MudAlert Dense="true" NoIcon="true" Severity="Severity.Success">
            gpt-3.5-turbo：速度慢，但是真强大
            <MudChip T="string" Color="Color.Error" Size="Size.Small">最近巨慢，普通问题还是使用 davinci 吧</MudChip>
        </MudAlert>

        <MudText Class="mt-3 ml-3 d-flex align-center">
            模式
            <MudIcon Class="ml-1" Icon="@Icons.Material.Filled.Code" Size="Size.Small"></MudIcon>
            <MudChip T="string" Variant="Variant.Text" Color="Color.Warning">仅在使用 gpt-3.5-turbo 模型时可用</MudChip>
        </MudText>
        <MudAlert Dense="true" NoIcon="true" Severity="Severity.Success">普通模式：最基础的接入</MudAlert>
        <MudAlert Dense="true" NoIcon="true" Severity="Severity.Success">程序员模式：你对面坐了一个大神程序员</MudAlert>

        <MudText Class="mt-3 ml-3 d-flex align-center">
            其它
            <MudIcon Class="ml-1" Icon="@Icons.Material.Filled.Person" Size="Size.Small"></MudIcon>
        </MudText>
        <MudAlert Dense="true" NoIcon="true" Severity="Severity.Success">连续对话模式：会保存聊天语境</MudAlert>
    }

    @foreach (var history in _histories)
    {
        <MudPaper Class="pa-2 mt-3" Square="true" Outlined="true">
            <div class="d-flex align-start mb-3">
                <MudIcon Class="mt-1"
                         Icon="@Icons.Material.Filled.Chat"
                         Color="Color.Primary"
                         Size="Size.Small" />
                <MudText Class="ml-2" Typo="Typo.subtitle1">@history.Question</MudText>
            </div>

            <div class="d-flex">
                <MudIcon Class="mr-2"
                         Icon="@Icons.Material.Filled.SmartToy"
                         Color="Color.Secondary"
                         Size="Size.Small" />
                <MudMarkdown Value="@history.Answer" />
            </div>

            @if (_isShowRetry && history.Equals(_histories.Last()))
            {
                <MudButton Class="ml-7"
                           Variant="Variant.Filled"
                           Size="Size.Small"
                           StartIcon="@Icons.Material.Filled.Autorenew"
                           OnClick="@(()=>RetryChat())"
                           Color="Color.Error">重试</MudButton>
            }
        </MudPaper>
    }
    @if (_currentQuestion.IsNotEmpty())
    {
        <MudPaper Class="pa-2 mt-3" Square="true" Outlined="true">

            <div class="d-flex align-start mb-3">
                <MudIcon Class="mt-1"
                         Icon="@Icons.Material.Filled.Chat"
                         Color="Color.Primary"
                         Size="Size.Small" />
                <MudText Class="ml-2" Typo="Typo.subtitle1">@_currentQuestion</MudText>
            </div>

            @if (_currentAnswer.Length == 0)
            {
                <MudProgressLinear Color="Color.Secondary"
                                   Striped="true"
                                   Size="Size.Large"
                                   Value="100"
                                   Class="my-7" />
            }
            else
            {
                <div class="d-flex">
                    <MudIcon Class="mr-2"
                             Icon="@Icons.Material.Filled.SmartToy"
                             Color="Color.Secondary"
                             Size="Size.Small" />
                    <MudText Typo="Typo.body1">@_currentAnswer.ToString()</MudText>
                </div>
            }
        </MudPaper>
    }

    <div id="message-end" style="height:0; overflow:hidden"></div>
</div>
<div class="chat-tools">
    <MudTextField Label="想聊点什么呢？"
                  @bind-Value="_searchKey"
                  Disabled="@_isLoading"
                  Variant="Variant.Outlined"
                  Adornment="Adornment.End"
                  AdornmentColor="Color.Secondary"
                  AdornmentIcon="@Icons.Material.Filled.Send"
                  OnAdornmentClick="@(()=>BeginChat())"
                  OnKeyUp="@((args)=>KeyUp(args.Key))" />
</div>
@code {
    private int _selectedModel = 1;
    private int _selectedChatType = 1;
    private bool _selectedSaveContext;
    private bool _isShowRetry;
    private bool _isLoading;
    private string _searchKey = "";
    private string _currentQuestion = "";
    private readonly StringBuilder _currentAnswer = new StringBuilder();
    private List<QuestionAndAnswer> _histories = null!;

    protected override Task OnInitializedAsync()
    {
        _histories = new List<QuestionAndAnswer>();
        return base.OnInitializedAsync();
    }

    private async Task KeyUp(string key)
    {
        if (key != "Enter")
        {
            return;
        }
        await RequestOpenAIStreaming();
    }

    private async void OnSaveContextChanged(bool value)
    {
        _selectedSaveContext = value;
        if (_selectedSaveContext == false)
        {
            return;
        }

        if (_histories.Count > 0)
        {
            var result = await DialogService.ShowMessageBox("提示", "是否清除历史对话？不清除可能会导致结果不准确！", "清除", "不清除");
            if (result != null && result == true)
            {
                _histories.Clear();
                StateHasChanged();
            }
        }
    }

    private async Task BeginChat()
    {
        await RequestOpenAIStreaming();
    }
    private async Task RetryChat()
    {
        var question = _histories.Last().Question;
        if (question.IndexOf("提问:") == 0)
        {
            question = question.Substring(3);
        }
        _searchKey = question;
        _histories.Remove(_histories.Last());
        await RequestOpenAIStreaming();
    }
    private async Task RequestOpenAI()
    {
        if (_searchKey.IsEmpty())
        {
            return;
        }
        if (_isLoading)
        {
            return;
        }
        _isLoading = true;
        _isShowRetry = false;

        _currentQuestion = _selectedSaveContext ? $"提问:{_searchKey}" : _searchKey;
        _searchKey = "";
        string context = _selectedSaveContext ? string.Join("\n", _histories.Select(x => $"{x.Question}\n{x.Answer}")) : "";

        try
        {
            string prompt = $"{context}{_currentQuestion}";
            long timestamp = JiuLing.CommonLibs.Text.TimestampUtils.GetLen13();
            var postObj = new
            {
                prompt,
                chatType = _selectedChatType,
                timestamp,
                sign = JiuLing.CommonLibs.Security.MD5Utils.GetStringValueToLower($"{timestamp}{timestamp}{timestamp}")
            };
            var response = await HttpClientFactory.CreateClient("ChatAPI").PostAsJsonAsync($"chatgpt/do-chat", postObj);
            var result = await response.Content.ReadFromJsonAsync<ApiResult<string>>();

            if (result == null || result.Code != 0 || result.Data == null)
            {
                _currentAnswer.Append(result?.Message ?? "服务器未正确响应");
                if (result?.Code == 10)
                {
                    _isShowRetry = true;
                }
                return;
            }
            _currentAnswer.Append(result.Data);
        }
        catch (Exception ex)
        {
            _currentAnswer.Append($"出错了：{ex.Message}");
            _isShowRetry = true;
        }
        finally
        {
            _histories.Add(new QuestionAndAnswer(_currentQuestion, _currentAnswer.ToString()));
            _currentQuestion = "";
            _currentAnswer.Clear();
            _isLoading = false;
        }
    }

    private async Task RequestOpenAIStreaming()
    {
        if (_searchKey.IsEmpty())
        {
            return;
        }
        if (_isLoading)
        {
            return;
        }
        _isLoading = true;
        _isShowRetry = false;

        _currentQuestion = _selectedSaveContext ? $"提问:{_searchKey}" : _searchKey;
        _searchKey = "";
        string context = _selectedSaveContext ? string.Join("\n", _histories.Select(x => $"{x.Question}\n{x.Answer}")) : "";

        var jsInProcess = (IJSInProcessRuntime)JSRuntime;
        try
        {
            string prompt = $"{context}{_currentQuestion}";
            long timestamp = JiuLing.CommonLibs.Text.TimestampUtils.GetLen13();
            var postObj = new
            {
                prompt,
                chatType = _selectedChatType,
                model = _selectedModel,
                timestamp,
                sign = JiuLing.CommonLibs.Security.SHA1Utils.GetStringValueToLower($"{timestamp}{timestamp}{timestamp}")
            };

            var sc = new StringContent(postObj.ToJson(), Encoding.UTF8, "application/json");
            var requestMessage = new HttpRequestMessage(HttpMethod.Post, "chatgpt/do-chat-streaming")
                {
                    Content = sc
                };
            requestMessage.SetBrowserResponseStreamingEnabled(true);
            var response = await HttpClientFactory.CreateClient("ChatAPI").SendAsync(requestMessage, HttpCompletionOption.ResponseHeadersRead);
            await foreach (var rowData in JsonSerializer.DeserializeAsyncEnumerable<string>(await response.Content.ReadAsStreamAsync()))
            {
                if (rowData == null)
                {
                    continue;
                }
                var code = rowData.Substring(0, 3);
                var message = rowData.Substring(3);
                if (code == "00 ")
                {
                    return;
                }
                if (code == "01 ")
                {
                    _currentAnswer.Append(message);
                    StateHasChanged();
                    await Task.Delay(1);
                    jsInProcess.InvokeVoid("ScrollToEnd", "message-end");
                    continue;
                }
                if (code == "10 ")
                {
                    _isShowRetry = true;
                }
                throw new Exception(message);
            }
        }
        catch (Exception ex)
        {
            _currentAnswer.AppendLine();
            _currentAnswer.Append($"出错了：{ex.Message}");
            _isShowRetry = true;
        }
        finally
        {
            _isLoading = false;
            _histories.Add(new QuestionAndAnswer(_currentQuestion, _currentAnswer.ToString()));
            _currentQuestion = "";
            _currentAnswer.Clear();
            jsInProcess.InvokeVoid("ScrollToEnd", "message-end");
        }
    }
}