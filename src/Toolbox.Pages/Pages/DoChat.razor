@page "/chat"

@using JiuLing.CommonLibs.ExtensionMethods;
@using Toolbox.Pages.Models

@inject IHttpClientFactory HttpClientFactory;
@inject IDialogService DialogService

<PageTitle>码术 - AI 聊天</PageTitle>
<div class="chat-message">
    <div style="display:flex">
        <MudChipSet @bind-SelectedChip="_modelSelected" Filter="true" Mandatory=true>
            <MudChip Text="0"
                     Disabled="@_isLoading"
                     Variant="Variant.Outlined"
                     Color="Color.Info">普通模式</MudChip>
            <MudChip Text="1"
                     Disabled="@_isLoading"
                     Variant="Variant.Outlined"
                     Color="Color.Info"
                     Default=true>程序员模式</MudChip>
        </MudChipSet>
        <MudChipSet @bind-SelectedChip="_saveContextSelected" Filter="true">
            <MudChip Text="SaveContext"
                     Disabled="@_isLoading"
                     Variant="Variant.Outlined"
                     Color="Color.Warning"
                     OnClick="OnSaveContextChanged">连续对话模式</MudChip>
        </MudChipSet>
    </div>

    @if (_isShowWarning)
    {
        <MudAlert Severity="Severity.Warning"
              Class="mt-3"
              ContentAlignment="HorizontalAlignment.Left">当前模式会记录对话内容，尽可能的让对话更流畅，所以比较耗资源，您玩玩就好啦~~</MudAlert>
    }

    @if (_histories.Count == 0)
    {
        <MudAlert Class="mt-3" Icon="@Icons.Material.Filled.Person" Severity="Severity.Success">普通模式 - 普通接入</MudAlert>
        <MudAlert Class="mt-1" Icon="@Icons.Material.Filled.Code" Severity="Severity.Success">程序员模式 - 接入了一个大神程序员</MudAlert>
        <MudAlert Class="mt-1" Icon="@Icons.Material.Filled.Abc" Severity="Severity.Success">连续对话模式 - 会保存聊天语境</MudAlert>
    }

    @foreach (var history in _histories)
    {
        <MudPaper Class="pa-2 mt-3" Square="true" Outlined="true">
            <div class="question">
                <MudIcon Icon="@Icons.Material.Filled.Chat"
                     Color="Color.Primary"
                     Size="Size.Small" />
                <MudText Class="ml-2" Typo="Typo.subtitle1">@history.Question</MudText>
            </div>

            @if (history.Answer.IsEmpty())
            {
                <MudProgressLinear Color="Color.Secondary"
                           Striped="true"
                           Size="Size.Large"
                           Value="100"
                           Class="my-7" />
            }
            else
            {
                <div class="answer">
                    <MudIcon Class="mr-2"
                     Icon="@Icons.Material.Filled.SmartToy"
                     Color="Color.Secondary"
                     Size="Size.Small" />
                    @if (_modelSelected.Text == "1")
                    {
                        <MudMarkdown Value="@history.Answer" />
                    }
                    else
                    {
                        <MudText Class="ml-2" Typo="Typo.body1">@history.Answer</MudText>
                    }
                </div>
            }
        </MudPaper>
    }
</div>
<div class="chat-tools">
    <MudTextField Label="想聊点什么呢？"
                  @bind-Value="_searchKey"
                  Disabled="@_isLoading"
                  Variant="Variant.Outlined"
                  Adornment="Adornment.End"
                  AdornmentColor="Color.Secondary"
                  AdornmentIcon="@Icons.Material.Filled.Send"
                  OnAdornmentClick="BeginChat"
                  OnKeyUp="KeyUp" />
</div>
@code {

    private bool _isLoading;
    private string _searchKey = "";
    private bool _isSaveContext = false;
    private bool _isShowWarning => _isSaveContext;
    private List<QuestionAndAnswer> _histories = null!;
    private MudChip _modelSelected;
    private MudChip? _saveContextSelected;

    protected override Task OnInitializedAsync()
    {
        _histories = new List<QuestionAndAnswer>();
        return base.OnInitializedAsync();
    }

    private void KeyUp(KeyboardEventArgs args)
    {
        if (args.Key != "Enter")
        {
            return;
        }
        InvokeAsync(RequestOpenAI);
    }

    private async void OnSaveContextChanged()
    {
        if (_saveContextSelected == null)
        {
            _isSaveContext = false;
            return;
        }

        if (_histories.Count > 0)
        {
            var result = await DialogService.ShowMessageBox("提示", "是否清除历史对话？不清除可能会导致结果不准确！", "清除", "不清除");
            if (result != null && result == true)
            {
                _histories.Clear();
                StateHasChanged();
            }
        }
        _isSaveContext = true;
    }

    private async void BeginChat()
    {
        await RequestOpenAI();
    }

    private async Task RequestOpenAI()
    {
        if (_searchKey.IsEmpty())
        {
            return;
        }
        if (_isLoading)
        {
            return;
        }
        _isLoading = true;

        string question = _isSaveContext ? $"提问:{_searchKey}" : _searchKey;
        string answer = "";
        _searchKey = "";
        string context = _isSaveContext ? string.Join("\n", _histories.Select(x => $"{x.Question}\n{x.Answer}")) : "";
        _histories.Add(new QuestionAndAnswer(question, answer));
        StateHasChanged();
        try
        {
            string prompt = $"{context}{question}";
            var postObj = new { prompt, ChatType = Convert.ToInt32(_modelSelected.Text) };
            var response = await HttpClientFactory.CreateClient("WebAPI").PostAsJsonAsync($"chatgpt/do-chat", postObj);
            var result = await response.Content.ReadFromJsonAsync<ApiResult<string>>();

            if (result == null)
            {
                answer = "服务器未响应。";
                return;
            }
            if (result.Code != 0)
            {
                answer = result.Message;
                return;
            }
            answer = result.Data ?? "服务器的数据似乎有点异常。";
        }
        catch (Exception ex)
        {
            answer = $"崩了，崩了，{ex.Message}，{ex.StackTrace}";
        }
        finally
        {
            _histories.Last(x => x.Question == question).Answer = answer;
            _isLoading = false;
            StateHasChanged();
        }
    }
}