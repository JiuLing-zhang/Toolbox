@page "/chat"

@using JiuLing.CommonLibs.ExtensionMethods;
@using System.Text.Json;
@using System.Text;
@using Toolbox.Pages.Models

@inject IHttpClientFactory HttpClientFactory;
@inject IDialogService DialogService

<PageTitle>码术 - AI 聊天</PageTitle>
<div class="chat-message">
    <div style="display:flex">
        <MudChipSet @bind-SelectedChip="_modelSelected" Filter="true" Mandatory=true>
            <MudChip Text="0"
                     Disabled="@_isLoading"
                     Variant="Variant.Outlined"
                     Color="Color.Info">普通模式</MudChip>
            <MudChip Text="1"
                     Disabled="@_isLoading"
                     Variant="Variant.Outlined"
                     Color="Color.Info"
                     Default=true>程序员模式</MudChip>
        </MudChipSet>
        <MudChipSet @bind-SelectedChip="_saveContextSelected" Filter="true">
            <MudChip Text="SaveContext"
                     Disabled="@_isLoading"
                     Variant="Variant.Outlined"
                     Color="Color.Warning"
                     OnClick="OnSaveContextChanged">连续对话模式</MudChip>
        </MudChipSet>
    </div>

    @if (_isShowWarning)
    {
        <MudAlert Severity="Severity.Warning"
              Class="mt-3"
              ContentAlignment="HorizontalAlignment.Left">当前模式会记录对话内容，尽可能的让对话更流畅，所以比较耗资源，您玩玩就好啦~~</MudAlert>
    }

    @if (_histories.Count == 0)
    {
        <MudAlert Class="mt-3" Icon="@Icons.Material.Filled.Person" Severity="Severity.Success">普通模式 - 普通接入</MudAlert>
        <MudAlert Class="mt-1" Icon="@Icons.Material.Filled.Code" Severity="Severity.Success">程序员模式 - 接入了一个大神程序员</MudAlert>
        <MudAlert Class="mt-1" Icon="@Icons.Material.Filled.Abc" Severity="Severity.Success">连续对话模式 - 会保存聊天语境</MudAlert>
    }

    @foreach (var history in _histories)
    {

        <MudPaper Class="pa-2 mt-3" Square="true" Outlined="true">
            <div class="d-flex align-start mb-3">
                <MudIcon Class="mt-1"
                     Icon="@Icons.Material.Filled.Chat"
                     Color="Color.Primary"
                     Size="Size.Small" />
                <MudText Class="ml-2" Typo="Typo.subtitle1">@history.Question</MudText>
            </div>

            @if (history.Answer.IsEmpty())
            {
                if (_sbAnswerStream.Length == 0)
                {
                    <MudProgressLinear Color="Color.Secondary"
                           Striped="true"
                           Size="Size.Large"
                           Value="100"
                           Class="my-7" />
                }
                else
                {
                    <div class="d-flex">
                        <MudIcon Class="mr-2"
                     Icon="@Icons.Material.Filled.SmartToy"
                     Color="Color.Secondary"
                     Size="Size.Small" />
                        @if (_modelSelected.Text == "1")
                        {
                            <MudMarkdown Value="@_sbAnswerStream.ToString()" />
                        }
                        else
                        {
                            <MudText Class="ml-2" Typo="Typo.body1">@_sbAnswerStream.ToString()</MudText>
                        }
                    </div>
                }

            }
            else
            {
                <div class="d-flex">
                    <MudIcon Class="mr-2"
                     Icon="@Icons.Material.Filled.SmartToy"
                     Color="Color.Secondary"
                     Size="Size.Small" />
                    @if (_modelSelected.Text == "1")
                    {
                        <MudMarkdown Value="@history.Answer" />
                    }
                    else
                    {
                        <MudText Class="ml-2" Typo="Typo.body1">@history.Answer</MudText>
                    }
                </div>
            }
            @if (_isShowRetry && history.Equals(_histories.Last()))
            {
                <MudButton Class="ml-7"
                   Variant="Variant.Filled"
                   Size="Size.Small"
                   StartIcon="@Icons.Material.Filled.Autorenew"
                   OnClick="RetryChat"
                   Color="Color.Error">重试</MudButton>
            }

        </MudPaper>
    }
</div>
<div class="chat-tools">
    <MudTextField Label="想聊点什么呢？"
                  @bind-Value="_searchKey"
                  Disabled="@_isLoading"
                  Variant="Variant.Outlined"
                  Adornment="Adornment.End"
                  AdornmentColor="Color.Secondary"
                  AdornmentIcon="@Icons.Material.Filled.Send"
                  OnAdornmentClick="BeginChat"
                  OnKeyUp="KeyUp" />
</div>
@code {
    private bool _isShowRetry = false;
    private bool _isLoading;
    private string _searchKey = "";
    private bool _isSaveContext = false;
    private bool _isShowWarning => _isSaveContext;
    private List<QuestionAndAnswer> _histories = null!;
    private MudChip _modelSelected;
    private MudChip? _saveContextSelected;
    private readonly StringBuilder _sbAnswerStream = new StringBuilder();
    private volatile bool _isReadingStream = true;

    protected override Task OnInitializedAsync()
    {
        _histories = new List<QuestionAndAnswer>();
        return base.OnInitializedAsync();
    }

    private void KeyUp(KeyboardEventArgs args)
    {
        if (args.Key != "Enter")
        {
            return;
        }
        InvokeAsync(RequestOpenAIStreaming);
    }

    private async void OnSaveContextChanged()
    {
        if (_saveContextSelected == null)
        {
            _isSaveContext = false;
            return;
        }

        if (_histories.Count > 0)
        {
            var result = await DialogService.ShowMessageBox("提示", "是否清除历史对话？不清除可能会导致结果不准确！", "清除", "不清除");
            if (result != null && result == true)
            {
                _histories.Clear();
                StateHasChanged();
            }
        }
        _isSaveContext = true;
    }

    private async void BeginChat()
    {
        await RequestOpenAIStreaming();
    }
    private async void RetryChat()
    {
        var question = _histories.Last().Question;
        if (question.IndexOf("提问:") == 0)
        {
            question = question.Substring(3);
        }
        _searchKey = question;
        _histories.Remove(_histories.Last());
        await RequestOpenAIStreaming();
    }
    private async Task RequestOpenAI()
    {
        if (_searchKey.IsEmpty())
        {
            return;
        }
        if (_isLoading)
        {
            return;
        }
        _isLoading = true;
        _isShowRetry = false;

        string question = _isSaveContext ? $"提问:{_searchKey}" : _searchKey;
        string answer = "";
        _searchKey = "";
        string context = _isSaveContext ? string.Join("\n", _histories.Select(x => $"{x.Question}\n{x.Answer}")) : "";
        _histories.Add(new QuestionAndAnswer(question, answer));
        StateHasChanged();
        try
        {
            string prompt = $"{context}{question}";
            var postObj = new { prompt, ChatType = Convert.ToInt32(_modelSelected.Text) };
            var response = await HttpClientFactory.CreateClient("WebAPI").PostAsJsonAsync($"chatgpt/do-chat", postObj);
            var result = await response.Content.ReadFromJsonAsync<ApiResult<string>>();

            if (result == null || result.Code != 0 || result.Data == null)
            {
                answer = result?.Message ?? "服务器未正确响应";
                if (result?.Code == 10)
                {
                    _isShowRetry = true;
                }
                return;
            }
            answer = result.Data;
        }
        catch (Exception ex)
        {
            answer = $"出错了：{ex.Message}";
            _isShowRetry = true;
        }
        finally
        {
            _histories.Last(x => x.Question == question).Answer = answer;
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RequestOpenAIStreaming()
    {
        if (_searchKey.IsEmpty())
        {
            return;
        }
        if (_isLoading)
        {
            return;
        }
        _isLoading = true;
        _isShowRetry = false;

        string question = _isSaveContext ? $"提问:{_searchKey}" : _searchKey;
        _sbAnswerStream.Clear();
        _searchKey = "";
        string context = _isSaveContext ? string.Join("\n", _histories.Select(x => $"{x.Question}\n{x.Answer}")) : "";
        _histories.Add(new QuestionAndAnswer(question, ""));
        StateHasChanged();

        try
        {
            string prompt = $"{context}{question}";
            var postObj = new { prompt, ChatType = Convert.ToInt32(_modelSelected.Text) };
            var requestMessage = new HttpRequestMessage(HttpMethod.Post, $"chatgpt/do-chat-streaming");
            requestMessage.Content = new StringContent(JsonSerializer.Serialize(postObj), Encoding.UTF8, "application/json");
            var response = await HttpClientFactory.CreateClient("WebAPI").SendAsync(requestMessage);
            using (var stream = await response.Content.ReadAsStreamAsync())
            {
                using (var reader = new StreamReader(stream))
                {
                    while (!reader.EndOfStream)
                    {
                        var currentLine = reader.ReadLine() ?? "";
                        if (currentLine.StartsWith("error:"))
                        {
                            currentLine = currentLine.TrimStart(new char[] { 'e', 'r', 'r', 'o', 'r', ':' }).Trim();
                            var errorInfo = currentLine.Split(':');
                            var code = Convert.ToInt32(errorInfo[0]);
                            if (code == 10)
                            {
                                _isShowRetry = true;
                            }
                            throw new Exception(errorInfo[1]);
                        }
                        if (!currentLine.StartsWith("data:"))
                        {
                            _sbAnswerStream.AppendLine();
                            continue;
                        }
                        currentLine = currentLine.TrimStart(new char[] { 'd', 'a', 't', 'a', ':' });
                        if (currentLine == "[DONE]")
                        {
                            return;
                        }
                        _sbAnswerStream.Append(currentLine);
                        StateHasChanged();
                        await Task.Delay(1);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _sbAnswerStream.AppendLine();
            _sbAnswerStream.Append($"出错了：{ex.Message}");
            _isShowRetry = true;
        }
        finally
        {
            _isReadingStream = false;
            _isLoading = false;
            _histories.Last(x => x.Question == question).Answer = _sbAnswerStream.ToString();
            StateHasChanged();
        }
    }
}