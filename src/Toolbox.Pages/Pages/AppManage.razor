@page "/app"
@using System.Text.Json
@using Microsoft.Extensions.Configuration
@using Toolbox.Pages.Models

@inject IHttpClientFactory HttpClientFactory;
@inject IConfiguration Configuration

<PageTitle>码术 - 开源工具</PageTitle>

<MudTabs Elevation="2"
         Rounded="true"
         ApplyEffectsToContainer="true"
         PanelClass="pa-6"
         ActivePanelIndexChanged="OnActivePanelIndexChanged">
    <MudTabPanel Text="开源软件">
        @if (_apps == null)
        {
            if (_isAppError)
            {
                <MudAlert Severity="Severity.Error">软件列表加载失败</MudAlert>
            }
            else
            {
                for (int i = 0; i < 3; i++)
                {
                    <MudPaper Class="mt-5 mb-5 pa-5" Elevation="3">
                        <MudSkeleton Animation="Animation.Wave" Width="30%" />
                        <MudSkeleton Animation="Animation.Wave" Width="60%" />
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="70%" Height="110px" />
                    </MudPaper>
                }
            }
        }
        else
        {
            foreach (var app in _apps)
            {
                <MudPaper Class="mt-5 mb-5 pa-5" Elevation="3">
                    <div style="display: flex; align-items: center;">
                        <MudImage Src="@app.Icon" Width="20" Height="20" />
                        <MudText Class="ml-3" Typo="Typo.subtitle1" Style="font-weight: bold;">@app.AppName</MudText>
                        <MudIconButton Class="ml-8" Icon="@Icons.Custom.Brands.GitHub" Style="color:#0099FF" Href="@app.GitHub" Target="_blank" />
                    </div>

                    <MudText Typo="Typo.body2">@app.Description</MudText>
                    @if (app.Versions == null)
                    {
                        <MudAlert Class="mt-2" Severity="Severity.Info" Dense="true">没有可用的版本信息。仓库有源码，请自行编译</MudAlert>
                    }
                    else
                    {
                        foreach (var version in app.Versions)
                        {
                            var icon = "";
                            if (version.PlatformType == Enums.PlatformEnum.Windows)
                            {
                                icon = "windows";
                            }
                            else if (version.PlatformType == Enums.PlatformEnum.Android)
                            {
                                icon = "android";
                            }
                            else if (version.PlatformType == Enums.PlatformEnum.iOS)
                            {
                                icon = "apple";
                            }

                            <MudGrid Class="mt-2">
                                <MudItem Class="d-flex align-center" xs="12" md="12">
                                    <MudText Typo="Typo.subtitle2">平台:</MudText>
                                    <MudImage Class="ml-3" Src="@($"_content/Toolbox.Pages/images/{icon}.png")" Width="15" Height="15"></MudImage>
                                    <MudText Class="ml-1" Typo="Typo.subtitle2">@version.PlatformType</MudText>
                                    <MudLink Class="ml-2" Href="@($"{Configuration["WebAPIHost"]}/app/download/{version.DownloadId}")" Underline="Underline.None">下载</MudLink>
                                </MudItem>

                                <MudItem Class="d-flex align-center" xs="12" md="5">
                                    <MudText Typo="Typo.subtitle2">版本:</MudText>
                                    <MudText Class="ml-3" Typo="Typo.subtitle2">@version.VersionName</MudText>
                                </MudItem>

                                <MudItem Class="d-flex align-center" xs="12" md="5">
                                    <MudText Typo="Typo.subtitle2">发布时间:</MudText>
                                    <MudText Class="ml-3" Typo="Typo.subtitle2">@version.PublishTime</MudText>
                                </MudItem>
                                <MudItem Class="d-flex align-center" xs="12" md="5">
                                    <MudText Typo="Typo.subtitle2">大小:</MudText>
                                    <MudText Class="ml-3" Typo="Typo.subtitle2">@version.FileLengthMb</MudText>
                                </MudItem>

                                <MudItem Class="d-flex align-center" xs="12" md="5">
                                    <MudText Typo="Typo.subtitle2">@version.SignType.ToString():</MudText>
                                    <MudText Class="ml-8" Typo="Typo.subtitle2">@version.SignValue</MudText>
                                </MudItem>
                            </MudGrid>
                        }
                    }
                </MudPaper>
            }
        }
        <MudLink Href="/app-publish">发布</MudLink>
    </MudTabPanel>
    <MudTabPanel Text="开源组件">

        @if (_components == null)
        {
            if (_isComponentError)
            {
                <MudAlert Severity="Severity.Error">组件列表加载失败</MudAlert>
            }
            else
            {
                for (int i = 0; i < 3; i++)
                {
                    <MudPaper Class="mt-5 mb-5 pa-5" Elevation="3">
                        <MudSkeleton Animation="Animation.Wave" Width="30%" />
                        <MudSkeleton Animation="Animation.Wave" Width="60%" />
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="70%" Height="110px" />
                    </MudPaper>
                }
            }
        }
        else
        {
            foreach (var component in _components)
            {
                <MudPaper Class="mt-5 mb-5 pa-5" Elevation="3">
                    <MudGrid Class="mt-2">
                        <MudItem Class="d-flex align-center" xs="12" md="6">
                            <MudImage Src="@component.Icon" Width="20" Height="20" />
                            <MudText Class="ml-3" Typo="Typo.subtitle1" Style="font-weight: bold;">@component.Name</MudText>
                        </MudItem>
                        <MudItem Class="d-flex align-center" xs="12" md="6">
                            <MudImage Src="@($"https://img.shields.io/nuget/v/{component.Name}")" />
                            <MudImage Src="@($"https://img.shields.io/nuget/dt/{component.Name}")" Class="ml-2" />
                        </MudItem>
                    </MudGrid>
                    <MudText Class="mt-5" Typo="Typo.body2">
                        @component.Description
                    </MudText>
                    <div style="display: flex; align-items: center; margin-top: 10px;">
                        <MudLink Href="@($"https://www.nuget.org/packages/{component.Name}")" Underline="Underline.None" Target="_blank">nuget</MudLink>
                        <MudLink Class="ml-4" Href="@component.GitHub" Underline="Underline.None" Target="_blank">github</MudLink>
                    </div>
                </MudPaper>
            }
        }
    </MudTabPanel>
</MudTabs>

@code {
    private bool _isAppError = false;
    private List<AppInfo>? _apps;
    private bool _isComponentError = false;
    private List<ComponentInfo>? _components;
    protected override async Task OnInitializedAsync()
    {
        await GetApps();
    }

    private async void OnActivePanelIndexChanged(int index)
    {
        if (index == 0)
        {
            await GetApps();
        }
        else if (index == 1)
        {
            await GetComponents();
        }
    }

    private async Task GetApps()
    {
        if (_apps != null && _isAppError == false)
        {
            return;
        }
        _isAppError = false;
        StateHasChanged();

        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        var response = await HttpClientFactory.CreateClient("WebAPI").GetStringAsync($"app/app-list");
        var result = JsonSerializer.Deserialize<ApiResult<List<AppInfo>>>(response, options);
        if (result != null && result.Code == 0)
        {
            _apps = result.Data;
        }
        else
        {
            _isAppError = true;
        }
        StateHasChanged();
    }

    private async Task GetComponents()
    {
        if (_components != null && _isComponentError == false)
        {
            return;
        }
        _isComponentError = false;
        StateHasChanged();

        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        var response = await HttpClientFactory.CreateClient("WebAPI").GetStringAsync($"app/component-list");
        var result = JsonSerializer.Deserialize<ApiResult<List<ComponentInfo>>>(response, options);
        if (result != null && result.Code == 0)
        {
            _components = result.Data;
        }
        else
        {
            _isComponentError = true;
        }
        StateHasChanged();
    }
}
