@page "/app-publish"
@using System.Text.Json
@using Microsoft.Extensions.Configuration
@using Toolbox.Pages.Enums
@using Toolbox.Pages.Models
@using System.Text
@using JiuLing.CommonLibs.ExtensionMethods
@using Toolbox.Pages.Shared.Dialogs

@inject IHttpClientFactory HttpClientFactory;
@inject IConfiguration Configuration
@inject IDialogService Dialog

<PageTitle>码术 - 开源工具</PageTitle>

@if (_apps == null)
{
    <MudPaper Class="mt-5 mb-5 pa-5" Elevation="3">
        <MudSkeleton Class="mt-3" Animation="Animation.Wave" Width="30%" Height="40px;" />
        <MudSkeleton Class="mt-3" Animation="Animation.Wave" Width="60%" Height="60px;" />
        <MudSkeleton Class="mt-3" Animation="Animation.Wave" Width="20%" />
        <MudSkeleton Class="mt-3" Animation="Animation.Wave" Width="20%" Height="50px;" />
        <MudSkeleton Class="mt-3" Animation="Animation.Wave" Width="80%" />
        <MudSkeleton Class="mt-3" Animation="Animation.Wave" Width="70%" Height="30px;" />
    </MudPaper>
}
else
{
    <MudGrid Class="mt-5 mb-5">
        <MudOverlay Visible="_isPublishing" DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        </MudOverlay>
        <MudItem xs="12" md="12">
            <MudPaper Class="pa-4">
                <div class="d-flex mb-3">
                    <MudIcon Icon="@Icons.Material.Filled.CloudDone" Color="Color.Info"></MudIcon>
                    <MudText Class="ml-1">软件发布</MudText>
                </div>
                <MudForm @ref="@_form" Model="@_model">
                    <MudSelect T="string"
                               @bind-Value="_model.AppKey"
                               Required="true"
                               RequiredError="请选择软件"
                               Label="软件名称"
                               Variant="Variant.Outlined">
                        @foreach (var app in _apps)
                        {
                            <MudSelectItem Value="@(app.Key)">@app.Value</MudSelectItem>
                        }
                    </MudSelect>

                    <div class="d-flex align-center mt-4 mb-4 pl-5 pr-5 pt-2 pb-2 chip-set-group">
                        <MudText Class="mr-4">平台</MudText>
                        <MudRadioGroup @bind-SelectedOption="_model.Platform" T="PlatformEnum">
                            <MudRadio T="PlatformEnum" Color="Color.Info" Option="@(PlatformEnum.Windows)">Windows</MudRadio>
                            <MudRadio T="PlatformEnum" Color="Color.Info" Option="@(PlatformEnum.Android)">Android</MudRadio>
                            <MudRadio T="PlatformEnum" Color="Color.Info" Option="@(PlatformEnum.iOS)">iOS</MudRadio>
                        </MudRadioGroup>
                    </div>

                    <MudTextField T="string"
                                  Label="版本"
                                  @bind-Value="_model.VersionName"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="版本号不能为空" />

                    <div class="d-flex align-center mt-4 mb-4 pl-5 pr-5 pt-2 pb-2 chip-set-group">
                        <MudText Class="mr-4">最小运行版本</MudText>
                        <MudRadioGroup @bind-SelectedOption="_model.IsMinVersion" T="bool">
                            <MudRadio T="bool" Color="Color.Info" Option="@(true)">是</MudRadio>
                            <MudRadio T="bool" Color="Color.Info" Option="@(false)">否</MudRadio>
                        </MudRadioGroup>
                    </div>

                    <MudTextField T="string" @bind-Value="_model.Log" Label="更新日志" Variant="Variant.Outlined" Text="" Lines="5" />

                    <MudTextField Class="mt-3"
                                  T="string"
                                  Label="文件"
                                  @bind-Value="_model.FileName"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  Required="true"
                                  RequiredError="文件不能为空" />
                    <MudFileUpload T="IBrowserFile" @bind-Files="_file" OnFilesChanged="UploadFiles">
                        <ActivatorContent>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Info"
                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                选择文件
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                    <div class="d-flex align-center mt-4 mb-4 pl-5 pr-5 pt-2 pb-2 chip-set-group">
                        <MudText Class="mr-4">计算签名</MudText>
                        <MudRadioGroup @bind-SelectedOption="_model.SignType" T="SignTypeEnum">
                            <MudRadio T="SignTypeEnum" Color="Color.Info" Option="@(SignTypeEnum.MD5)">MD5</MudRadio>
                            <MudRadio T="SignTypeEnum" Color="Color.Info" Option="@(SignTypeEnum.SHA1)">SHA1</MudRadio>
                        </MudRadioGroup>
                    </div>

                    <MudTextField T="string" Label="密码"
                                  @bind-Value="_model.Password"
                                  InputType="InputType.Password"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="密码不能为空" />
                    <MudButton Class="mt-5"
                               Disabled="_isSuccess"
                               Variant="Variant.Filled"
                               EndIcon="@Icons.Material.Filled.Send"
                               Color="Color.Info"
                               OnClick="@(async () => await Publish())">发布</MudButton>

                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    private MudForm _form = null!;
    private Dictionary<string, string>? _apps;
    private readonly AppPublishModel _model = new();
    private IBrowserFile _file = null!;
    private bool _isPublishing = false;
    private bool _isSuccess = false;
    protected override async Task OnInitializedAsync()
    {
        await GetApps();
    }

    private async Task GetApps()
    {
        var response = await HttpClientFactory.CreateClient("WebAPI").GetStringAsync("app/app-name-list");
        var result = JsonSerializer.Deserialize<ApiResult<Dictionary<string, string>>>(response);
        if (result == null || result.Code != 0)
        {
            return;
        }
        _apps = result.Data;
    }

    private void UploadFiles(InputFileChangeEventArgs e)
    {
        long maxFileSize = Convert.ToInt64(Configuration["PublishMaxFileSize"]);
        if (e.GetMultipleFiles()[0].Size >= maxFileSize)
        {
            var options = new DialogOptions()
                {
                    NoHeader = true
                };
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "文件大小超过系统限制");
            Dialog.Show<DialogOk>("提示", parameters, options);
            _model.FileName = "";
            return;
        }

        _model.FileName = e.File.Name;
    }

    private async Task Publish()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }
        _isPublishing = true;
        long maxFileSize = Convert.ToInt64(Configuration["PublishMaxFileSize"]);
        var formData = new MultipartFormDataContent();
        formData.Add(new StringContent(_model.AppKey), nameof(_model.AppKey));
        formData.Add(new StringContent(Convert.ToInt32(_model.Platform).ToString()), nameof(_model.Platform));
        formData.Add(new StringContent(_model.VersionName), nameof(_model.VersionName));
        formData.Add(new StringContent(_model.IsMinVersion.ToString()), nameof(_model.IsMinVersion));
        formData.Add(new StringContent(_model.Log ?? ""), nameof(_model.Log));
        formData.Add(new StringContent(Convert.ToInt32(_model.SignType).ToString()), nameof(_model.SignType));
        formData.Add(new StringContent(_model.Password), nameof(_model.Password));
        formData.Add(new StreamContent(_file.OpenReadStream(maxFileSize)), "file", _model.FileName);

        var response = await HttpClientFactory.CreateClient("WebAPI").PostAsync("app/publish", formData);
        var json = await response.Content.ReadAsStringAsync();
        _isPublishing = false;
        var result = JsonSerializer.Deserialize<ApiResult>(json);

        if (result != null && result.Code == 0)
        {
            _isSuccess = true;
        }
        var parameters = new DialogParameters();
        parameters.Add("ContentText", result?.Message ?? "未知错误");
        await Dialog.ShowAsync<DialogOk>("提示", parameters);
    }
}