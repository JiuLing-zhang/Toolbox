@using Microsoft.Extensions.Configuration;
@using Toolbox.Pages.Shared.Dialogs;

@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IDialogService DialogService
@inject IHttpClientFactory HttpClientFactory;

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Dense="true" Color="Color.Dark">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />

        @if (!PlatformSettings.IsApp)
        {
            <MudMenu Label="下载客户端"
                     Color="Color.Inherit"
                     Dense="true"
                     ActivationEvent="@MouseEvent.MouseOver"
                     AnchorOrigin="Origin.BottomCenter">
                <MudMenuItem Class="d-flex align-center"
                             Disabled="@(_windowsDownloadUrl.IsEmpty())">
                    @if (_windowsDownloadUrl.IsEmpty())
                    {
                        <MudSkeleton />
                    }
                    else
                    {
                        <MudImage Class="mr-1"
                                  Src="@($"_content/Toolbox.Pages/images/windows.png")"
                                  Width="15"
                                  Height="15"></MudImage>
                        <MudLink Href="@(_windowsDownloadUrl)"
                                 Style="color: #000000 !important;"
                                 Underline="Underline.None">Windows 平台</MudLink>
                    }

                </MudMenuItem>
                <MudMenuItem Class="d-flex align-center"
                             Disabled="@(_androidDownloadLink.IsEmpty())">
                    @if (_androidDownloadLink.IsEmpty())
                    {
                        <MudSkeleton />
                    }
                    else
                    {
                        <MudImage Class="mr-1"
                                  Src="@($"_content/Toolbox.Pages/images/android.png")"
                                  Width="15"
                                  Height="15"></MudImage>
                        <MudLink Href="@(_androidDownloadLink)"
                                 Style="color: #000000 !important;"
                                 Underline="Underline.None">Android 平台</MudLink>
                    }
                </MudMenuItem>
            </MudMenu>
        }
        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="false">
            <MudIcon Class="ml-5" Icon="@Icons.Material.Filled.TipsAndUpdates" />
            <MudText Class="cursor-default" Typo="Typo.subtitle1">人生苦短，用心写Bug</MudText>
        </MudHidden>
        <MudIconButton Class="ml-3" Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/JiuLing-zhang" Target="_blank" />
    </MudAppBar>
    <MudDrawer @bind-Open="@open" Elevation="1">
        <MudDrawerHeader>
            <div onclick="@(()=>GotoIndex())" class="cursor-pointer">
                <MudImage Src="_content/Toolbox.Pages/images/main-ascii.png" Width="80"></MudImage>
            </div>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    bool open = true;
    private string _windowsDownloadUrl = "";
    private string _androidDownloadLink = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (!PlatformSettings.IsApp)
            {
                try
                {
                    var appKey = $"{Configuration["AppKey"]}";
                    var tempType = (new { DownloadUrl = "" }).GetType();
                    dynamic? windowsResult = await HttpClientFactory.CreateClient("WebAPI").GetFromJsonAsync($"app/check-update/{appKey}/windows", tempType);
                    _windowsDownloadUrl = windowsResult?.DownloadUrl ?? "";
                    _windowsDownloadUrl = _windowsDownloadUrl.Replace("http:", "").Replace("https:", "");

                    dynamic? androidResult = await HttpClientFactory.CreateClient("WebAPI").GetFromJsonAsync($"app/check-update/{appKey}/android", tempType);
                    _androidDownloadLink = androidResult?.DownloadUrl ?? "";
                    _androidDownloadLink = _androidDownloadLink.Replace("http:", "").Replace("https:", "");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"APP 下载地址获取失败：{ex.Message}");
                }
            }
        }
    }

    void ToggleDrawer()
    {
        open = !open;
    }

    private void GotoIndex()
    {
        NavigationManager.NavigateTo("/");
    }
}